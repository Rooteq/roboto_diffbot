Run teleop ROS2:
ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --remap cmd_vel:=cmd_vel_key

Run SLAM ROS2:
ros2 launch slam_toolbox online_async_launch.py slam_params_file:=./src/roboto_diffbot/config/mapper_params_online_async.yaml use_sim_time:=true

Map server:
ros2 run nav2_map_server map_server --ros-args -p yaml_filename:=./my_map.yaml -p use_sim_time:=true
ros2 run nav2_util lifecycle_bringup map_server

AMCL:
ros2 run nav2_amcl amcl --ros-args -p use_sim_time:=true
ros2 run nav2_util lifecycle_bringup amcl

TODO:
Set param for use_sim_time on real robot!


claude response xd:

Your current use of the Trigger service is a good starting point, but it may not be comprehensive enough to handle all aspects of your system efficiently. Let's analyze the current approach and consider potential improvements:

Current Approach (using Trigger service):
Pros:
1. Simple and straightforward to implement.
2. Sufficient for basic "ping" functionality to check if the robot is available.
3. Allows the robot to activate its publisher upon receiving a call.

Cons:
1. Limited information exchange - it only communicates success/failure.
2. Lacks specific details about the system state or configuration.
3. May not be sufficient for more complex lifecycle management scenarios.

Potential Improvements:

1. Custom Service Message:
   Instead of using the standard Trigger service, you could define a custom service message that includes more detailed information. This could include:
   - Current state of the robot (e.g., UNCONFIGURED, INACTIVE, ACTIVE)
   - Version information (useful for ensuring compatibility)
   - Available topics or services
   - Error codes or diagnostic information

2. Bi-directional Information Flow:
   The service could allow the GUI to send configuration parameters to the robot, such as:
   - Desired update frequency
   - Specific frames to use for transformations
   - Any other runtime parameters

3. State Synchronization:
   Include mechanisms to ensure the GUI and robot have a consistent view of the system state. This could involve:
   - Sending the current state in each service response
   - Using a separate topic for continuous state updates

4. Error Handling:
   Expand the service to include more detailed error information, allowing for more sophisticated error handling and recovery procedures.

5. Heartbeat Mechanism:
   While not directly part of the service, implementing a heartbeat topic alongside the service could provide continuous monitoring of the connection status.

Recommendation:
While the Trigger service is a good starting point, creating a custom service message would offer more flexibility and robustness for your specific use case. Here's a conceptual example of what a custom service message might look like:

```
# Request
string client_version
float64 desired_update_frequency
string[] requested_topics
---
# Response
bool success
string message
string robot_state
string[] available_topics
string[] active_topics
```

This allows for more detailed communication between the GUI and the robot, enabling better state management and error handling.

In conclusion, while your current use of the Trigger service is functional, expanding to a more detailed custom service would provide better support for managing the lifecycles of both the GUI and robot components, especially as your system grows in complexity. It would allow for more nuanced communication and state management between the two parts of your system.